from sqlalchemy import Column, Integer, String, DateTime, Float, ForeignKey
from clickhouse_sqlalchemy import engines
from app.db.session import Base
import datetime
from sqlalchemy.orm import relationship

# üöÄ –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, autoincrement=True)  # ‚¨Ö PRIMARY KEY
    username = Column(String)
    email = Column(String)
    hashed_password = Column(String)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

    # –°–≤—è–∑—å —Å –∫–æ—Ä–∑–∏–Ω–∞–º–∏
    cart_items = relationship("Cart", back_populates="user")

    # –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–∞–º–∏
    orders = relationship("Order", back_populates="user")

    # –°–≤—è–∑—å —Å –æ—Ç–∑—ã–≤–∞–º–∏
    reviews = relationship("Review", back_populates="user")

    __table_args__ = (engines.MergeTree(order_by="id"),)

# üè∑ –ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class Category(Base):
    __tablename__ = "categories"

    id = Column(Integer, primary_key=True, autoincrement=True)  # ‚¨Ö PRIMARY KEY
    name = Column(String)

    # –°–≤—è–∑—å —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    products = relationship("Product", back_populates="category")

    __table_args__ = (engines.MergeTree(order_by="id"),)

# üì¶ –ú–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞
class Product(Base):
    __tablename__ = "products"

    id = Column(Integer, primary_key=True, autoincrement=True)  # ‚¨Ö PRIMARY KEY
    name = Column(String)
    description = Column(String)
    price = Column(Float)
    category_id = Column(Integer, ForeignKey("categories.id"))  # –°–≤—è–∑—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    seller_id = Column(Integer, ForeignKey("sellers.id"))  # –°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

    # –°–≤—è–∑—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    category = relationship("Category", back_populates="products")

    # –°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    seller = relationship("Seller", back_populates="products")

    # –°–≤—è–∑—å —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    cart_items = relationship("Cart", back_populates="product")

    # –°–≤—è–∑—å —Å –æ—Ç–∑—ã–≤–∞–º–∏
    reviews = relationship("Review", back_populates="product")

    __table_args__ = (engines.MergeTree(order_by="id"),)

# üìã –ú–æ–¥–µ–ª—å –∑–∞–∫–∞–∑–∞
class Order(Base):
    __tablename__ = "orders"

    id = Column(Integer, primary_key=True, autoincrement=True)  # ‚¨Ö PRIMARY KEY
    user_id = Column(Integer, ForeignKey("users.id"))  # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    seller_id = Column(Integer, ForeignKey("sellers.id"))  # –°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    total_price = Column(Float)
    status = Column(String, default="pending")  # pending, completed, cancelled
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user = relationship("User", back_populates="orders")

    # –°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    seller = relationship("Seller", back_populates="orders")

    # –°–≤—è–∑—å —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∑–∞–∫–∞–∑–µ
    order_items = relationship("OrderItem", back_populates="order")

    __table_args__ = (engines.MergeTree(order_by="id"),)

# üõí –ú–æ–¥–µ–ª—å –∫–æ—Ä–∑–∏–Ω—ã
class Cart(Base):
    __tablename__ = "carts"

    id = Column(Integer, primary_key=True, autoincrement=True)  # ‚¨Ö PRIMARY KEY
    user_id = Column(Integer, ForeignKey("users.id"))  # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    product_id = Column(Integer, ForeignKey("products.id"))  # –°–≤—è–∑—å —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
    quantity = Column(Integer, default=1)

    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user = relationship("User", back_populates="cart_items")

    # –°–≤—è–∑—å —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
    product = relationship("Product", back_populates="cart_items")

    __table_args__ = (engines.MergeTree(order_by="id"),)

# ‚≠ê –ú–æ–¥–µ–ª—å –æ—Ç–∑—ã–≤–∞
class Review(Base):
    __tablename__ = "reviews"

    id = Column(Integer, primary_key=True, autoincrement=True)  # ‚¨Ö PRIMARY KEY
    user_id = Column(Integer, ForeignKey("users.id"))  # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    product_id = Column(Integer, ForeignKey("products.id"))  # –°–≤—è–∑—å —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
    rating = Column(Integer)  # 1-5
    comment = Column(String)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user = relationship("User", back_populates="reviews")

    # –°–≤—è–∑—å —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
    product = relationship("Product", back_populates="reviews")

    __table_args__ = (engines.MergeTree(order_by="id"),)

# üè¢ –ú–æ–¥–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞
class Seller(Base):
    __tablename__ = "sellers"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    password = Column(String)
    name = Column(String)
    email = Column(String)

    # –°–≤—è–∑—å —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    products = relationship("Product", back_populates="seller")

    # –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–∞–º–∏
    orders = relationship("Order", back_populates="seller")

    __table_args__ = (
        engines.MergeTree(
            order_by=('id',),  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            primary_key=('id',),  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
            index=[('name', 'index_name')]  # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
        ),
    )

# üì¶ –ú–æ–¥–µ–ª—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ (–¥–ª—è —Å–≤—è–∑–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏)
class OrderItem(Base):
    __tablename__ = "order_items"

    id = Column(Integer, primary_key=True, autoincrement=True)  # ‚¨Ö PRIMARY KEY
    order_id = Column(Integer, ForeignKey("orders.id"))  # –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–æ–º
    product_id = Column(Integer, ForeignKey("products.id"))  # –°–≤—è–∑—å —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
    quantity = Column(Integer)
    price = Column(Float)

    # –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–æ–º
    order = relationship("Order", back_populates="order_items")

    # –°–≤—è–∑—å —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
    product = relationship("Product", back_populates="order_items")

    __table_args__ = (engines.MergeTree(order_by="id"),)
